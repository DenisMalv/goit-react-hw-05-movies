{"version":3,"file":"static/js/296.1b5f4e98.chunk.js","mappings":"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","sources":["components/HomePage/HomePage.styled.js","components/MoviesPage/MoviePage.styled.js","components/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const HomePageList = styled.ul`\r\n  display: flex;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 16px;\r\n  padding-bottom: 24px;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  align-items: baseline;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Film = styled.li`\r\n  display: block;\r\n  width: 200px;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n  overflow: hidden;\r\n  transition: transform 200ms ease;\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n`;\r\n\r\nexport const FilmLink = styled(Link)`\r\n  text-decoration: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const FilmDescriptionContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 10px;\r\n  height: 80px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const FilmRating = styled.p`\r\n  font-family: Roboto;\r\n\r\n  text-decoration: none;\r\n  color: #282828;\r\n  padding: 5px;\r\n  margin: 10px;\r\n  width: 32px;\r\n  text-align: center;\r\n  border: 1px solid black;\r\n  border-radius: 50%;\r\n`;\r\n\r\nexport const FilmTitle = styled.p`\r\ndisplay:block\r\n  font-family: Roboto;\r\n\r\n  text-decoration: none;\r\n  color: #282828;\r\n  padding: 10px;\r\n  margin: 0;\r\n\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const MoviePageList = styled.ul`\r\n  display: flex;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 16px;\r\n  padding-bottom: 24px;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  align-items: baseline;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background: rgb(215, 254, 255);\r\n  background: linear-gradient(\r\n    0deg,\r\n    rgba(215, 254, 255, 0) 0%,\r\n    rgba(69, 69, 69, 0.5) 50%,\r\n    rgba(215, 254, 255, 0) 100%\r\n  );\r\n  margin: 0 auto;\r\n  border-radius: 9px;\r\n  overflow: hidden;\r\n`;\r\nexport const SearchButton = styled.button`\r\n  display: inline-block;\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 0;\r\n  background-size: 40%;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  opacity: 0.6;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  cursor: pointer;\r\n  outline: none;\r\n  position: relative;\r\n  background-color: #a0aead00;\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n  label {\r\n    display: block;\r\n    position: absolute;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    white-space: nowrap;\r\n    clip-path: inset(50%);\r\n    border: 0;\r\n  }\r\n`;\r\nexport const SearchInput = styled.input`\r\n  display: inline-block;\r\n  width: 100%;\r\n  font: Roboto;\r\n  font-size: 20px;\r\n  border: none;\r\n  outline: none;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n  background-color: #a0aead00;\r\n  :placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport const InputLabel = styled.label`\r\n  width: 100%;\r\n  background-color: #a0aead00;\r\n`;\r\n","import { Outlet, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport { fetchMovie } from 'services/api';\r\nimport { BiSearchAlt } from 'react-icons/bi';\r\n\r\nimport {\r\n  Film,\r\n  FilmLink,\r\n  FilmDescriptionContainer,\r\n  FilmRating,\r\n  FilmTitle,\r\n} from '../HomePage/HomePage.styled';\r\nimport {\r\n  MoviePageList,\r\n  SearchInput,\r\n  SearchButton,\r\n  InputLabel,\r\n  Form,\r\n} from './MoviePage.styled';\r\n\r\nconst MoviesPage = () => {\r\n  const [searchQuery, setSearchQuery] = useSearchParams('');\r\n  const searchQueryGet = searchQuery.get('query');\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [responseFilm, setResponseFilm] = useState([]);\r\n\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (!searchQueryGet) {\r\n      // setInputValue('');\r\n      return;\r\n    }\r\n    fetchMovie(searchQueryGet).then(({ results }) => {\r\n      console.log(results);\r\n      setResponseFilm(results);\r\n      setInputValue(searchQueryGet);\r\n    });\r\n  }, [searchQueryGet]);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    const form = event.target;\r\n    const query = form.query.value;\r\n    if (query === '') {\r\n      console.log('pusto');\r\n      return;\r\n    }\r\n    setSearchQuery({ query: query });\r\n  };\r\n\r\n  const handleInputChange = event => {\r\n    setInputValue(event.target.value);\r\n  };\r\n  console.log(searchQuery);\r\n  return (\r\n    <>\r\n      <Form action=\"\" onSubmit={handleSubmit}>\r\n        <InputLabel>\r\n          <SearchInput\r\n            type=\"text\"\r\n            name=\"query\"\r\n            onChange={handleInputChange}\r\n            value={inputValue}\r\n          />\r\n        </InputLabel>\r\n        <SearchButton type=\"submit\">\r\n          <BiSearchAlt size={24} />\r\n        </SearchButton>\r\n      </Form>\r\n      {!searchQueryGet && <p>Please enter search movie text</p>}\r\n      {searchQueryGet && (\r\n        <>\r\n          <MoviePageList>\r\n            {responseFilm.map(searchFilm => (\r\n              <Film key={searchFilm.id}>\r\n                <FilmLink\r\n                  to={`/movies/${searchFilm.id}`}\r\n                  state={{ from: location.pathname + location.search }}\r\n                >\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500/${searchFilm.poster_path}`}\r\n                    alt={searchFilm.title}\r\n                    width=\"100%\"\r\n                  />\r\n                  <FilmDescriptionContainer>\r\n                    <FilmTitle>{searchFilm.title}</FilmTitle>\r\n                    <FilmRating>{searchFilm.vote_average}</FilmRating>\r\n                  </FilmDescriptionContainer>\r\n                </FilmLink>\r\n              </Film>\r\n            ))}\r\n          </MoviePageList>\r\n        </>\r\n      )}\r\n      <Outlet />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesPage;\r\n\r\n// const MoviesPage = () => {\r\n//   const [inputQuery, setInputQuery] = useState('');\r\n//   const [submitQuery, setSubmitQuery] = useState('');\r\n//   const [responseFilm, setResponseFilm] = useState([]);\r\n\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     if (!submitQuery) {\r\n//       return;\r\n//     }\r\n//     fetchMovie(submitQuery).then(({ results }) => {\r\n//       console.log(results);\r\n//       setResponseFilm(results);\r\n//       setSubmitQuery(submitQuery);\r\n//     });\r\n//   }, [submitQuery]);\r\n\r\n//   const handleSubmit = event => {\r\n//     event.preventDefault();\r\n//     console.log(inputQuery);\r\n//     if (inputQuery === '') {\r\n//       console.log('pusto');\r\n//       return;\r\n//     }\r\n//     setSubmitQuery(inputQuery);\r\n//     navigate({\r\n//       pathname: location.pathname,\r\n//       search: `query=${inputQuery}`,\r\n//     });\r\n//     console.log(submitQuery);\r\n//     console.log(location);\r\n//   };\r\n\r\n//   const handleInputEvent = event => {\r\n//     const { value } = event.currentTarget;\r\n//     setInputQuery(value);\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <form action=\"\" onSubmit={handleSubmit}>\r\n//         <label>\r\n//           <input type=\"text\" name=\"query\" onChange={handleInputEvent} />\r\n//         </label>\r\n//         <button type=\"submit\">search</button>\r\n//       </form>\r\n//       {submitQuery && (\r\n//         <>\r\n//           <ul>\r\n//             {responseFilm.map(searchFilm => (\r\n//               <li key={searchFilm.id}>\r\n//                 {/* <Link to={`${searchFilm.id}` }> */}\r\n//                 <Link\r\n//                   to={`${searchFilm.id}`}\r\n//                   state={{ from: location.pathname }}\r\n//                 >\r\n//                   <img\r\n//                     src={`https://image.tmdb.org/t/p/w500/${searchFilm.poster_path}`}\r\n//                     alt=\"\"\r\n//                   />\r\n//                   <p>{searchFilm.title}</p>\r\n//                   <p>{searchFilm.vote_average}</p>\r\n//                 </Link>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </>\r\n//       )}\r\n//       <Outlet />\r\n//     </>\r\n//   );\r\n// };\r\n","import axios from 'axios';\r\n\r\nasync function fetchTrandingMovies() {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=6dae1a863e182d2e5c972909bcd1e575&&page=1`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function fetchMovie(query) {\r\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie?`;\r\n  const params = {\r\n    params: {\r\n      api_key: '6dae1a863e182d2e5c972909bcd1e575',\r\n      language: `en-US`,\r\n      query: query,\r\n      page: 1,\r\n    },\r\n  };\r\n\r\n  const { data } = await axios.get(SEARCH_URL, params);\r\n  return data;\r\n}\r\n\r\nasync function fetchMovieDetails(movieId, type = '') {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${movieId}${\r\n        type ? '/' + type : ''\r\n      }?api_key=6dae1a863e182d2e5c972909bcd1e575&language=en-US`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport { fetchTrandingMovies, fetchMovie, fetchMovieDetails };\r\n"],"names":["HomePageList","styled","Film","FilmLink","Link","FilmDescriptionContainer","FilmRating","FilmTitle","MoviePageList","Form","SearchButton","SearchInput","InputLabel","useSearchParams","searchQuery","setSearchQuery","searchQueryGet","get","useState","inputValue","setInputValue","responseFilm","setResponseFilm","location","useLocation","useEffect","fetchMovie","then","results","console","log","action","onSubmit","event","preventDefault","query","target","value","type","name","onChange","size","map","searchFilm","to","id","state","from","pathname","search","src","poster_path","alt","title","width","vote_average","fetchTrandingMovies","axios","data","params","api_key","language","page","fetchMovieDetails","movieId"],"sourceRoot":""}