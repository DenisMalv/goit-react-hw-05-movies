{"version":3,"file":"static/js/387.d0cb0b12.chunk.js","mappings":"wNAEaA,E,QAAWC,EAAAA,GAAH,0N,SCoCrB,EAhCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAQA,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBN,EAAS,WAAWO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAC5CC,QAAQC,IAAIF,GACZJ,EAAaI,QAEd,CAACR,IACJS,QAAQC,IAAIV,IAEV,8BACGG,IACC,+BACE,SAACL,EAAD,UACGK,EAAUQ,KAAI,SAAAC,GAAK,OAClB,2BACE,gBACEC,IAAG,0CAAqCD,EAAME,cAC9CC,IAAKH,EAAMI,QAEb,uCAAeJ,EAAMK,cACrB,kCAAUL,EAAMI,UANTJ,EAAMM,e,mKCpBdC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+GAE2BC,IAAAA,IAAA,oGAF3B,uBAEYC,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,gCAOIZ,QAAQC,IAAR,MAPJ,yFAWeY,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,8HAEQC,EAAS,CACbA,OAAQ,CACNC,QAAS,mCACTC,SAAS,QACTH,MAAOA,EACPI,KAAM,IAPZ,SAWyBP,IAAAA,IAXzB,6CAW+CI,GAX/C,uBAWUH,EAXV,EAWUA,KAXV,kBAYSA,GAZT,2EAeef,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCN,GAAjC,8FAA0C4B,EAA1C,+BAAiD,GAAjD,kBAE2BR,IAAAA,IAAA,6CACiBpB,GADjB,OAEnB4B,EAAO,IAAMA,EAAO,GAFD,6DAF3B,uBAEYP,EAFZ,EAEYA,KAFZ,kBAOWA,GAPX,gCASIZ,QAAQC,IAAR,MATJ","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const CastList = styled.ul`\r\n  display: flex;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 16px;\r\n  padding-bottom: 24px;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  align-items: baseline;\r\n  list-style: none;\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieDetails } from '../../services/api';\r\n\r\nimport { CastList } from './Cast.styled';\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n  const [filmCasts, setFilmCasts] = useState(null);\r\n  useEffect(() => {\r\n    fetchMovieDetails(movieId, 'credits').then(({ cast }) => {\r\n      console.log(cast);\r\n      setFilmCasts(cast);\r\n    });\r\n  }, [movieId]);\r\n  console.log(movieId);\r\n  return (\r\n    <>\r\n      {filmCasts && (\r\n        <>\r\n          <CastList>\r\n            {filmCasts.map(actor => (\r\n              <li key={actor.id}>\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\r\n                  alt={actor.name}\r\n                />\r\n                <p>character: {actor.character}</p>\r\n                <p>name: {actor.name}</p>\r\n              </li>\r\n            ))}\r\n          </CastList>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","import axios from 'axios';\r\n\r\nasync function fetchTrandingMovies() {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=6dae1a863e182d2e5c972909bcd1e575&&page=1`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function fetchMovie(query) {\r\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie?`;\r\n  const params = {\r\n    params: {\r\n      api_key: '6dae1a863e182d2e5c972909bcd1e575',\r\n      language: `en-US`,\r\n      query: query,\r\n      page: 1,\r\n    },\r\n  };\r\n\r\n  const { data } = await axios.get(SEARCH_URL, params);\r\n  return data;\r\n}\r\n\r\nasync function fetchMovieDetails(movieId, type = '') {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${movieId}${\r\n        type ? '/' + type : ''\r\n      }?api_key=6dae1a863e182d2e5c972909bcd1e575&language=en-US`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport { fetchTrandingMovies, fetchMovie, fetchMovieDetails };\r\n"],"names":["CastList","styled","movieId","useParams","useState","filmCasts","setFilmCasts","useEffect","fetchMovieDetails","then","cast","console","log","map","actor","src","profile_path","alt","name","character","id","fetchTrandingMovies","axios","data","fetchMovie","query","params","api_key","language","page","type"],"sourceRoot":""}