{"version":3,"file":"static/js/450.3899e0e0.chunk.js","mappings":"yLAqGA,UAhGyB,WAAO,IAAD,EACrBA,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAR,WAAwBH,GACxB,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAsCF,EAAAA,EAAAA,UAAS,MAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBZ,GAASa,MAAK,SAAAC,GAC9BV,QAAQC,IAAI,WAAYL,GACxBQ,EAAQM,QAET,CAACd,KAEJW,EAAAA,EAAAA,YAAU,WAAO,IAAD,IACVF,GAGCF,GAGLG,EAAc,iBAACR,QAAD,IAACA,GAAD,UAACA,EAAUa,aAAX,aAAC,EAAiBC,YAAlB,gCAA2CT,EAAKU,UAC7D,CAACR,EAAaF,EAAd,OAAoBL,QAApB,IAAoBA,GAApB,UAAoBA,EAAUa,aAA9B,aAAoB,EAAiBC,QAEtC,8BACGT,IACC,iCACE,iBAAKW,MAAO,CAAEC,QAAS,QAAvB,WACE,gBACEC,IAAG,0CAAqCb,EAAKc,aAC7CC,IAAI,SACJC,MAAO,OAET,iBAAKL,MAAO,CAAEM,QAAS,IAAvB,WACE,qCAAajB,EAAKkB,iBAElB,oCAAYlB,EAAKU,UACjB,4BACE,wCACA,uBAAIV,EAAKmB,eAEX,4BACE,oCACA,uBAAInB,EAAKoB,OAAOC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO,cAEpC,SAAC,KAAD,CACEC,GAAE,UAAKtB,GACPS,MAAO,CACLc,eAAgB,OAChBb,QAAS,eACTc,gBAAiB,UACjBT,QAAS,GACTU,aAAc,GAPlB,4BAeJ,4BACE,6CACA,SAAC,KAAD,CACEH,GAAG,OACHhB,MAAO,CAAEC,KAAMd,EAASiC,UACxBjB,MAAO,CACLc,eAAgB,OAChBb,QAAS,eACTc,gBAAiB,UACjBT,QAAS,GACTU,aAAc,GARlB,oBAaA,SAAC,KAAD,CACEH,GAAG,UACHhB,MAAO,CAAEC,KAAMd,EAASiC,UACxBjB,MAAO,CACLc,eAAgB,OAChBb,QAAS,eACTc,gBAAiB,UACjBT,QAAS,GACTU,aAAc,GARlB,sBAaA,SAAC,KAAD,c,mKC3FGE,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,+GAE2BC,IAAAA,IAAA,oGAF3B,uBAEYC,EAFZ,EAEYA,KAFZ,kBAKWA,GALX,gCAOIlC,QAAQC,IAAR,MAPJ,yFAWekC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,8HAEQC,EAAS,CACbA,OAAQ,CACNC,QAAS,mCACTC,SAAS,QACTH,MAAOA,EACPI,KAAM,IAPZ,SAWyBP,IAAAA,IAXzB,6CAW+CI,GAX/C,uBAWUH,EAXV,EAWUA,KAXV,kBAYSA,GAZT,2EAee1B,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCZ,GAAjC,8FAA0C6C,EAA1C,+BAAiD,GAAjD,kBAE2BR,IAAAA,IAAA,6CACiBrC,GADjB,OAEnB6C,EAAO,IAAMA,EAAO,GAFD,6DAF3B,uBAEYP,EAFZ,EAEYA,KAFZ,kBAOWA,GAPX,gCASIlC,QAAQC,IAAR,MATJ","sources":["components/MovieDetailsPage/MovieDetailsPage.jsx","services/api.js"],"sourcesContent":["import { Link, NavLink, Outlet } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieDetails } from '../../services/api';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  console.log(`location`, location);\n  const [film, setFilm] = useState(null);\n  const [backLinkURL, setBackLinkURL] = useState(null);\n\n  useEffect(() => {\n    fetchMovieDetails(movieId).then(res => {\n      console.log('movieId:', movieId);\n      setFilm(res);\n    });\n  }, [movieId]);\n\n  useEffect(() => {\n    if (backLinkURL) {\n      return;\n    }\n    if (!film) {\n      return;\n    }\n    setBackLinkURL(location?.state?.from ?? `/movies?query=${film.title}`);\n  }, [backLinkURL, film, location?.state?.from]);\n  return (\n    <>\n      {film && (\n        <>\n          <div style={{ display: 'flex' }}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${film.poster_path}`}\n              alt=\"poster\"\n              width={300}\n            />\n            <div style={{ padding: 10 }}>\n              <p>Rating : {film.vote_average}</p>\n\n              <p>Title : {film.title}</p>\n              <div>\n                <p>Overviev : </p>\n                <p>{film.overview}</p>\n              </div>\n              <div>\n                <p>Genres:</p>\n                <p>{film.genres.map(e => e.name + ', ')}</p>\n              </div>\n              <Link\n                to={`${backLinkURL}`}\n                style={{\n                  textDecoration: 'none',\n                  display: 'inline-block',\n                  backgroundColor: '#24e3f2',\n                  padding: 10,\n                  borderRadius: 5,\n                }}\n              >\n                Go back\n              </Link>\n            </div>\n          </div>\n\n          <div>\n            <p>More information</p>\n            <NavLink\n              to=\"cast\"\n              state={{ from: location.pathname }}\n              style={{\n                textDecoration: 'none',\n                display: 'inline-block',\n                backgroundColor: '#24e3f2',\n                padding: 10,\n                borderRadius: 5,\n              }}\n            >\n              Casts\n            </NavLink>\n            <NavLink\n              to=\"reviews\"\n              state={{ from: location.pathname }}\n              style={{\n                textDecoration: 'none',\n                display: 'inline-block',\n                backgroundColor: '#24e3f2',\n                padding: 10,\n                borderRadius: 5,\n              }}\n            >\n              Reviews\n            </NavLink>\n            <Outlet />\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nasync function fetchTrandingMovies() {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=6dae1a863e182d2e5c972909bcd1e575&&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchMovie(query) {\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie?`;\n  const params = {\n    params: {\n      api_key: '6dae1a863e182d2e5c972909bcd1e575',\n      language: `en-US`,\n      query: query,\n      page: 1,\n    },\n  };\n\n  const { data } = await axios.get(SEARCH_URL, params);\n  return data;\n}\n\nasync function fetchMovieDetails(movieId, type = '') {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}${\n        type ? '/' + type : ''\n      }?api_key=6dae1a863e182d2e5c972909bcd1e575&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport { fetchTrandingMovies, fetchMovie, fetchMovieDetails };\n"],"names":["movieId","useParams","location","useLocation","console","log","useState","film","setFilm","backLinkURL","setBackLinkURL","useEffect","fetchMovieDetails","then","res","state","from","title","style","display","src","poster_path","alt","width","padding","vote_average","overview","genres","map","e","name","to","textDecoration","backgroundColor","borderRadius","pathname","fetchTrandingMovies","axios","data","fetchMovie","query","params","api_key","language","page","type"],"sourceRoot":""}