{"version":3,"file":"static/js/296.674d2e3c.chunk.js","mappings":"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","sources":["components/HomePage/HomePage.styled.js","components/MoviesPage/MoviePage.styled.js","components/MoviesPage/MoviesPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const HomePageList = styled.ul`\n  display: flex;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n  padding-bottom: 24px;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: baseline;\n  list-style: none;\n`;\n\nexport const Film = styled.li`\n  display: block;\n  width: 200px;\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  overflow: hidden;\n  transition: transform 200ms ease;\n  &:hover {\n    transform: scale(1.02);\n  }\n`;\n\nexport const FilmLink = styled(Link)`\n  text-decoration: none;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const FilmDescriptionContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  height: 80px;\n  width: 100%;\n`;\n\nexport const FilmRating = styled.p`\n  font-family: Roboto;\n\n  text-decoration: none;\n  color: #282828;\n  padding: 5px;\n  margin: 10px;\n  width: 32px;\n  text-align: center;\n  border: 1px solid black;\n  border-radius: 50%;\n`;\n\nexport const FilmTitle = styled.p`\ndisplay:block\n  font-family: Roboto;\n\n  text-decoration: none;\n  color: #282828;\n  padding: 10px;\n  margin: 0;\n\n`;\n","import styled from '@emotion/styled';\n\nexport const MoviePageList = styled.ul`\n  display: flex;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n  padding-bottom: 24px;\n  margin: 0;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: baseline;\n  list-style: none;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background: rgb(137 137 137);\n  /* background: linear-gradient( 0deg, rgba(215, 254, 255, 0) 0%, rgba(69, 69, 69, 0.5) 50%, rgba(215, 254, 255, 0) 100% ); */\n  margin: 0 auto 20px;\n  border-radius: 9px;\n  overflow: hidden;\n  box-shadow: 0px 0px 7px 8px rgb(137 137 137);\n  height: 24px;\n`;\nexport const SearchButton = styled.button`\n  display: inline-block;\n  color:#282828;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  transition:  color 550ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: \n  cursor: pointer;\n  outline: none;\n  position: relative;\n  background-color: #a0aead00;\n  :hover {\n    color: #00cdd5;\n  }\n  label {\n    display: block;\n    position: absolute;\n    width: 32px;\n    height: 32px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n  }\n`;\nexport const SearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font-family: Roboto;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  background-color: #a0aead00;\n  :placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const InputLabel = styled.label`\n  width: 100%;\n  background-color: #a0aead00;\n`;\n","import { Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovie } from 'services/api';\nimport { BiSearchAlt } from 'react-icons/bi';\n\nimport {\n  Film,\n  FilmLink,\n  FilmDescriptionContainer,\n  FilmRating,\n  FilmTitle,\n} from '../HomePage/HomePage.styled';\nimport {\n  MoviePageList,\n  SearchInput,\n  SearchButton,\n  InputLabel,\n  Form,\n} from './MoviePage.styled';\n\nconst MoviesPage = () => {\n  const [searchQuery, setSearchQuery] = useSearchParams('');\n  const searchQueryGet = searchQuery.get('query');\n\n  const [inputValue, setInputValue] = useState('');\n  const [responseFilm, setResponseFilm] = useState([]);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!searchQueryGet) {\n      return;\n    }\n    fetchMovie(searchQueryGet).then(({ results }) => {\n      setResponseFilm(results);\n      setInputValue(searchQueryGet);\n    });\n  }, [searchQueryGet]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const query = form.query.value;\n    if (query === '') {\n      console.log('pusto');\n      return;\n    }\n    setSearchQuery({ query: query });\n  };\n\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  console.log(searchQuery);\n  console.log('location on MoviesPage: ', location);\n  return (\n    <>\n      <Form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n        <InputLabel>\n          <SearchInput\n            type=\"text\"\n            name=\"query\"\n            onChange={handleInputChange}\n            value={inputValue}\n          />\n        </InputLabel>\n        <SearchButton type=\"submit\">\n          <BiSearchAlt size={24} />\n        </SearchButton>\n      </Form>\n      {!searchQueryGet && <p>Please enter search movie text</p>}\n      {searchQueryGet && (\n        <>\n          <MoviePageList>\n            {responseFilm.map(searchFilm => (\n              <Film key={searchFilm.id}>\n                <FilmLink\n                  to={`/movies/${searchFilm.id}`}\n                  state={{\n                    from: location.pathname + location.search,\n                  }}\n                >\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500/${searchFilm.poster_path}`}\n                    alt={searchFilm.title}\n                    width=\"100%\"\n                    query={location.search}\n                  />\n                  <FilmDescriptionContainer>\n                    <FilmTitle>{searchFilm.title}</FilmTitle>\n                    <FilmRating>{searchFilm.vote_average}</FilmRating>\n                  </FilmDescriptionContainer>\n                </FilmLink>\n              </Film>\n            ))}\n          </MoviePageList>\n        </>\n      )}\n      <Outlet />\n    </>\n  );\n};\n\nexport default MoviesPage;\n\n// const MoviesPage = () => {\n//   const [inputQuery, setInputQuery] = useState('');\n//   const [submitQuery, setSubmitQuery] = useState('');\n//   const [responseFilm, setResponseFilm] = useState([]);\n\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     if (!submitQuery) {\n//       return;\n//     }\n//     fetchMovie(submitQuery).then(({ results }) => {\n//       console.log(results);\n//       setResponseFilm(results);\n//       setSubmitQuery(submitQuery);\n//     });\n//   }, [submitQuery]);\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     console.log(inputQuery);\n//     if (inputQuery === '') {\n//       console.log('pusto');\n//       return;\n//     }\n//     setSubmitQuery(inputQuery);\n//     navigate({\n//       pathname: location.pathname,\n//       search: `query=${inputQuery}`,\n//     });\n//     console.log(submitQuery);\n//     console.log(location);\n//   };\n\n//   const handleInputEvent = event => {\n//     const { value } = event.currentTarget;\n//     setInputQuery(value);\n//   };\n//   return (\n//     <>\n//       <form action=\"\" onSubmit={handleSubmit}>\n//         <label>\n//           <input type=\"text\" name=\"query\" onChange={handleInputEvent} />\n//         </label>\n//         <button type=\"submit\">search</button>\n//       </form>\n//       {submitQuery && (\n//         <>\n//           <ul>\n//             {responseFilm.map(searchFilm => (\n//               <li key={searchFilm.id}>\n//                 {/* <Link to={`${searchFilm.id}` }> */}\n//                 <Link\n//                   to={`${searchFilm.id}`}\n//                   state={{ from: location.pathname }}\n//                 >\n//                   <img\n//                     src={`https://image.tmdb.org/t/p/w500/${searchFilm.poster_path}`}\n//                     alt=\"\"\n//                   />\n//                   <p>{searchFilm.title}</p>\n//                   <p>{searchFilm.vote_average}</p>\n//                 </Link>\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n//       <Outlet />\n//     </>\n//   );\n// };\n","import axios from 'axios';\n\nasync function fetchTrandingMovies() {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=6dae1a863e182d2e5c972909bcd1e575&&page=1`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchMovie(query) {\n  const SEARCH_URL = `https://api.themoviedb.org/3/search/movie?`;\n  const params = {\n    params: {\n      api_key: '6dae1a863e182d2e5c972909bcd1e575',\n      language: `en-US`,\n      query: query,\n      page: 1,\n    },\n  };\n\n  const { data } = await axios.get(SEARCH_URL, params);\n  return data;\n}\n\nasync function fetchMovieDetails(movieId, type = '') {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}${\n        type ? '/' + type : ''\n      }?api_key=6dae1a863e182d2e5c972909bcd1e575&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport { fetchTrandingMovies, fetchMovie, fetchMovieDetails };\n"],"names":["HomePageList","styled","Film","FilmLink","Link","FilmDescriptionContainer","FilmRating","FilmTitle","MoviePageList","Form","SearchButton","SearchInput","InputLabel","useSearchParams","searchQuery","setSearchQuery","searchQueryGet","get","useState","inputValue","setInputValue","responseFilm","setResponseFilm","location","useLocation","useEffect","fetchMovie","then","results","console","log","action","onSubmit","event","preventDefault","query","target","value","autoComplete","type","name","onChange","size","map","searchFilm","to","id","state","from","pathname","search","src","poster_path","alt","title","width","vote_average","fetchTrandingMovies","axios","data","params","api_key","language","page","fetchMovieDetails","movieId"],"sourceRoot":""}